// questions graph and project p-1
:begin
CREATE CONSTRAINT UNIQUE_IMPORT_NAME FOR (node:`UNIQUE IMPORT LABEL`) REQUIRE (node.`UNIQUE IMPORT ID`) IS UNIQUE;
:commit
CALL db.awaitIndexes(300);
:begin
UNWIND [{_id:1, properties:{code:"Custom", description:"Load your own dataset.", text:"Custom"}}, {_id:2, properties:{code:"AdultDataset", text:"Adult Census Income Dataset"}}, {_id:3, properties:{code:"CreditDataset", text:"German Credit Dataset"}}, {_id:4, properties:{code:"CompasDataset", text:"ProPublica COMPAS Dataset"}}, {_id:5, properties:{code:"DatasetConfirmation-No", text:"No"}}, {_id:6, properties:{code:"DatasetConfirmation-Yes", text:"Yes"}}, {_id:7, properties:{code:"FeaturesSelection-features-selected", text:""}}, {_id:8, properties:{code:"Proxies-features-selected", text:""}}, {_id:9, properties:{code:"DisparateImpact", description:"Disparate Impact (DI) examines the ratio of favorable outcomes for two groups â€” a majority and a minority. A fair assessment is achieved when this measure equals 1.", text:"Disparate Impact"}}, {_id:10, properties:{code:"StatisticalParityDifference", description:"Statistical Parity Difference (SPD) measures the difference between the probability that a model assigns a positive outcome to a protected group versus an unprotected group, we got fairness when the measure equals 0.", text:"Statistical Parity"}}, {_id:11, properties:{code:"NoDataMitigation", text:"Do Not Mitigate"}}, {_id:12, properties:{code:"LearnedFairRepresentations", description:"Learned Fair Representations (LFR) aim to find and create a latent representation that encodes the data well but obfuscates information about protected attributes.", text:"Learned Fair Representations"}}, {_id:13, properties:{code:"CorrelationRemover", description:"The Correlation Remover applies a linear transformation to the non-sensitive feature columns in order to remove their correlation with the sensitive feature columns while retaining as much information as possible (as measured by the least-squares error).", text:"Correlation Remover"}}, {_id:14, properties:{code:"DisparateImpactRemover", description:"Disparate Impact Remover is a preprocessing technique that edits feature values increase group fairness while preserving rank-ordering within groups.", text:"Disparate Impact Remover"}}, {_id:15, properties:{code:"Reweighing", description:"The Reweighing method assigns different weights to training samples for each group and label combination, aiming to ensure fairness before classification.", text:"Reweighing"}}, {_id:16, properties:{code:"MitigateModel", text:"Mitigate Model"}}, {_id:17, properties:{code:"Test", text:"Validate on Test Data"}}, {_id:18, properties:{code:"MitigateDataAgain", text:"Mitigate Data Again"}}, {_id:19, properties:{code:"Done", text:"Done"}}, {_id:20, properties:{code:"NoModelMitigation", text:"Do Not Mitigate"}}] AS row
CREATE (n:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row._id}) SET n += row.properties SET n:Answer;
UNWIND [{_id:21, properties:{code:"AdversarialDebiasing", description:"Adversarial Debiasing is based on the idea of training one main model (called the classifier), while at the same time training a second model (called the adversary). The goal of the adversary model is to try to predict the sensitive feature (e.g., race or gender) from the classifier's output.", text:"Adversarial Debiasing"}}, {_id:22, properties:{code:"PrejudiceRemover", description:"Prejudice Remover is a method that modifies the objective function of the classifier by inserting a term that penalizes discrimination based on a sensitive feature. This term is added to the loss function of the model, and its weight can be controlled by a parameter that defines the degree of penalty.", text:"Prejudice Remover"}}, {_id:23, properties:{code:"MetaFairClassifier", description:"Meta-Fair Classifier is algorithm that uses an optimization method based on surrogate loss functions to ensure fairness. The idea is to train a classifier that meets specific equity metrics defined during training. This is done by incorporating a surrogate loss function that takes equity metrics into account in the optimization process. Equity metrics are translated into optimization constraints during model training.", text:"MetaFair Classifier"}}, {_id:24, properties:{code:"MitigateModelAgain", text:"Mitigate Model Again"}}, {_id:25, properties:{code:"MitigateOutcome", text:"Mitigate Outcome"}}, {_id:26, properties:{code:"EqualizedOdds", description:"Equalized Odds is a post-processing algorithm designed to correct bias in the results of a machine learning model, ensuring that false positive rates (FPR) and false negative rates (FNR) are equal among different sensitive groups (e.g., groups based on race, gender, ethnicity). The main goal is to achieve fairness in the results predicted by the model, regardless of membership in a specific group.", text:"Equalized Odds"}}, {_id:27, properties:{code:"RejectOptionClassification", description:"Reject Option Classification (ROC) is a post-processing algorithm used to improve fairness in machine learning models by intervening in areas where the model is less confident in its predictions.", text:"Reject Option Classification"}}, {_id:28, properties:{code:"NoOutcomeMitigation", text:"Do Not Mitigate"}}, {_id:29, properties:{code:"CalibratedEqualizedOdds", description:"The Calibrated Equalized Odds algorithm is very similar to the Equalized Odds algorithm by adding a calibration component. It therefore respects 2 key concepts. Equalized Odds, the distribution of errors (false positives and false negatives) should be equal for all groups; Calibration, the predicted probabilities should correctly reflect the reality for each group.", text:"Calibrated Equalized Odds"}}, {_id:30, properties:{code:"MitigateOutcomeAgain", text:"Mitigate Outcome Again"}}, {_id:31, properties:{code:"Test-BankDataset", text:"Bank Marketing Dataset"}}, {_id:32, properties:{code:"Test-CompasDataset", text:"ProPublica COMPAS Dataset"}}, {_id:33, properties:{code:"Test-LawSchoolGPADataset", text:"Law School GPA Dataset"}}, {_id:34, properties:{code:"Test-Custom", description:"Load your own dataset.", text:"Custom"}}, {_id:35, properties:{code:"Test-MEPSDataset21", text:"Medical Expenditure Panel Survey Dataset 2021"}}, {_id:36, properties:{code:"Test-CreditDataset", text:"German Credit Dataset"}}, {_id:37, properties:{code:"Test-MEPSDataset19", text:"Medical Expenditure Panel Survey Dataset 2019"}}, {_id:38, properties:{code:"Test-AdultDataset", text:"Adult Census Income Dataset"}}, {_id:39, properties:{code:"Test-MEPSDataset20", text:"Medical Expenditure Panel Survey Dataset 2020"}}, {_id:40, properties:{code:"TestAgain", text:"Validate on Test Data Again"}}] AS row
CREATE (n:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row._id}) SET n += row.properties SET n:Answer;
UNWIND [{_id:41, properties:{code:"CategoricalPolarization", text:"Categorical Polarization"}}, {_id:42, properties:{code:"NumericalPolarization", text:"Numerical Polarization"}}, {_id:60, properties:{code:"CreditDataset", text:"German Credit Dataset"}}, {_id:61, properties:{code:"CompasDataset", text:"ProPublica COMPAS Dataset"}}, {_id:62, properties:{code:"AdultDataset", text:"Adult Census Income Dataset"}}, {_id:63, properties:{code:"Custom", description:"Load your own dataset.", text:"Custom"}}] AS row
CREATE (n:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row._id}) SET n += row.properties SET n:Answer;
UNWIND [{_id:43, properties:{code:"DatasetSelection", description:"Choose or provide a dataset which will be subject to the fairness process.", created_at:"2024-05-31T18:20:23", text:"Choose a dataset or load your own.", type:"single"}}, {_id:44, properties:{code:"DatasetConfirmation", created_at:"2024-05-31T18:20:24", text:"Do you want to proceed with the selected dataset?", type:"single"}}, {_id:45, properties:{code:"FeaturesSelection", created_at:"2024-05-31T18:20:25", description:"Mark the features that are sensitive and the ones that are the output of the model.", text:"Which are the sensitive and output features?", type:"multiple"}}, {_id:46, properties:{code:"Proxies", created_at:"2024-05-31T18:20:26", description:"Proxies are features that are correlated with the sensitive features but are not themselves sensitive.", text:"Specify the proxies for the sensitive features.", type:"multiple"}}, {_id:47, properties:{code:"Detection", created_at:"2024-05-31T18:20:27", description:"The selected metrics will be mitigated in the next steps.", text:"Select the fairness metrics and the features to check.", type:"multiple"}}, {_id:48, properties:{code:"DataMitigation", created_at:"2024-05-31T18:20:28", text:"Which data mitigation technique do you want to apply?", type:"single"}}, {_id:49, properties:{code:"DataMitigationSummary", created_at:"2024-05-31T18:20:29", text:"What do you want to do next?", type:"single"}}, {_id:50, properties:{code:"ModelMitigation", created_at:"2024-05-31T18:20:30", text:"Which model mitigation technique do you want to apply?", type:"single"}}, {_id:51, properties:{code:"ModelMitigationSummary", created_at:"2024-05-31T18:20:31", text:"What do you want to do next?", type:"single"}}, {_id:52, properties:{code:"OutcomeMitigation", created_at:"2024-05-31T18:20:32", text:"Which outcome mitigation technique do you want to apply?", type:"single"}}, {_id:53, properties:{code:"OutcomeMitigationSummary", created_at:"2024-05-31T18:20:33", text:"What do you want to do next?", type:"single"}}, {_id:54, properties:{code:"TestSetChoice", created_at:"2024-05-31T18:20:34", text:"Choose the Test Data according to your Training Data.", type:"single"}}, {_id:55, properties:{code:"Polarization", created_at:"2024-05-31T18:20:35", text:"Select the polarization algorithm according to your data.", type:"multiple"}}, {_id:56, properties:{code:"TestSummary", created_at:"2024-05-31T18:20:36", text:"What do you want to do next?", type:"single"}}] AS row
CREATE (n:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row._id}) SET n += row.properties SET n:GraphQuestion;
UNWIND [{_id:57, properties:{code:"p-1", name:"Project 1"}}] AS row
CREATE (n:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row._id}) SET n += row.properties SET n:Project;
UNWIND [{_id:58, properties:{}}] AS row
CREATE (n:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row._id}) SET n += row.properties SET n:ProjectContext;
UNWIND [{_id:59, properties:{selection_strategy:"SingleSelectionStrategy", code:"DatasetSelection", created_at:"2025-01-12T19:34:09.803477", description:"Choose or provide a dataset which will be subject to the fairness process.", text:"Choose a dataset or load your own.", type:"single"}}] AS row
CREATE (n:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row._id}) SET n += row.properties SET n:ProjectQuestion;
:commit
:begin
UNWIND [{start: {_id:59}, end: {_id:60}, properties:{}}, {start: {_id:59}, end: {_id:61}, properties:{}}, {start: {_id:59}, end: {_id:62}, properties:{}}, {start: {_id:59}, end: {_id:63}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:HAS_AVAILABLE]->(end) SET r += row.properties;
UNWIND [{start: {_id:44}, end: {_id:1}, properties:{}}, {start: {_id:44}, end: {_id:2}, properties:{}}, {start: {_id:44}, end: {_id:4}, properties:{}}, {start: {_id:44}, end: {_id:3}, properties:{}}, {start: {_id:45}, end: {_id:6}, properties:{}}, {start: {_id:46}, end: {_id:7}, properties:{}}, {start: {_id:47}, end: {_id:8}, properties:{}}, {start: {_id:48}, end: {_id:9}, properties:{}}, {start: {_id:48}, end: {_id:10}, properties:{}}, {start: {_id:49}, end: {_id:13}, properties:{}}, {start: {_id:49}, end: {_id:15}, properties:{}}, {start: {_id:49}, end: {_id:14}, properties:{}}, {start: {_id:49}, end: {_id:12}, properties:{}}, {start: {_id:50}, end: {_id:24}, properties:{}}, {start: {_id:50}, end: {_id:16}, properties:{}}, {start: {_id:50}, end: {_id:11}, properties:{}}, {start: {_id:51}, end: {_id:22}, properties:{}}, {start: {_id:51}, end: {_id:23}, properties:{}}, {start: {_id:51}, end: {_id:21}, properties:{}}, {start: {_id:52}, end: {_id:25}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:ENABLED_BY]->(end) SET r += row.properties;
UNWIND [{start: {_id:52}, end: {_id:20}, properties:{}}, {start: {_id:52}, end: {_id:30}, properties:{}}, {start: {_id:53}, end: {_id:29}, properties:{}}, {start: {_id:53}, end: {_id:26}, properties:{}}, {start: {_id:53}, end: {_id:27}, properties:{}}, {start: {_id:54}, end: {_id:17}, properties:{}}, {start: {_id:54}, end: {_id:40}, properties:{}}, {start: {_id:55}, end: {_id:31}, properties:{}}, {start: {_id:55}, end: {_id:34}, properties:{}}, {start: {_id:55}, end: {_id:38}, properties:{}}, {start: {_id:55}, end: {_id:33}, properties:{}}, {start: {_id:55}, end: {_id:32}, properties:{}}, {start: {_id:55}, end: {_id:39}, properties:{}}, {start: {_id:55}, end: {_id:37}, properties:{}}, {start: {_id:55}, end: {_id:36}, properties:{}}, {start: {_id:55}, end: {_id:35}, properties:{}}, {start: {_id:56}, end: {_id:42}, properties:{}}, {start: {_id:56}, end: {_id:41}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:ENABLED_BY]->(end) SET r += row.properties;
UNWIND [{start: {_id:43}, end: {_id:1}, properties:{}}, {start: {_id:43}, end: {_id:2}, properties:{}}, {start: {_id:43}, end: {_id:3}, properties:{}}, {start: {_id:43}, end: {_id:4}, properties:{}}, {start: {_id:44}, end: {_id:5}, properties:{}}, {start: {_id:44}, end: {_id:6}, properties:{}}, {start: {_id:45}, end: {_id:7}, properties:{}}, {start: {_id:46}, end: {_id:8}, properties:{}}, {start: {_id:47}, end: {_id:9}, properties:{}}, {start: {_id:47}, end: {_id:10}, properties:{}}, {start: {_id:48}, end: {_id:11}, properties:{}}, {start: {_id:48}, end: {_id:12}, properties:{}}, {start: {_id:48}, end: {_id:13}, properties:{}}, {start: {_id:48}, end: {_id:14}, properties:{}}, {start: {_id:48}, end: {_id:15}, properties:{}}, {start: {_id:49}, end: {_id:16}, properties:{}}, {start: {_id:49}, end: {_id:17}, properties:{}}, {start: {_id:49}, end: {_id:18}, properties:{}}, {start: {_id:49}, end: {_id:19}, properties:{}}, {start: {_id:50}, end: {_id:20}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:HAS_ANSWER]->(end) SET r += row.properties;
UNWIND [{start: {_id:50}, end: {_id:21}, properties:{}}, {start: {_id:50}, end: {_id:22}, properties:{}}, {start: {_id:50}, end: {_id:23}, properties:{}}, {start: {_id:51}, end: {_id:25}, properties:{}}, {start: {_id:51}, end: {_id:17}, properties:{}}, {start: {_id:51}, end: {_id:19}, properties:{}}, {start: {_id:51}, end: {_id:18}, properties:{}}, {start: {_id:51}, end: {_id:24}, properties:{}}, {start: {_id:52}, end: {_id:26}, properties:{}}, {start: {_id:52}, end: {_id:27}, properties:{}}, {start: {_id:52}, end: {_id:28}, properties:{}}, {start: {_id:52}, end: {_id:29}, properties:{}}, {start: {_id:53}, end: {_id:30}, properties:{}}, {start: {_id:53}, end: {_id:17}, properties:{}}, {start: {_id:53}, end: {_id:19}, properties:{}}, {start: {_id:53}, end: {_id:18}, properties:{}}, {start: {_id:53}, end: {_id:24}, properties:{}}, {start: {_id:54}, end: {_id:31}, properties:{}}, {start: {_id:54}, end: {_id:32}, properties:{}}, {start: {_id:54}, end: {_id:33}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:HAS_ANSWER]->(end) SET r += row.properties;
UNWIND [{start: {_id:54}, end: {_id:34}, properties:{}}, {start: {_id:54}, end: {_id:35}, properties:{}}, {start: {_id:54}, end: {_id:36}, properties:{}}, {start: {_id:54}, end: {_id:37}, properties:{}}, {start: {_id:54}, end: {_id:38}, properties:{}}, {start: {_id:54}, end: {_id:39}, properties:{}}, {start: {_id:55}, end: {_id:41}, properties:{}}, {start: {_id:55}, end: {_id:42}, properties:{}}, {start: {_id:56}, end: {_id:30}, properties:{}}, {start: {_id:56}, end: {_id:40}, properties:{}}, {start: {_id:56}, end: {_id:19}, properties:{}}, {start: {_id:56}, end: {_id:18}, properties:{}}, {start: {_id:56}, end: {_id:24}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:HAS_ANSWER]->(end) SET r += row.properties;
UNWIND [{start: {_id:57}, end: {_id:58}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:HAS_CONTEXT]->(end) SET r += row.properties;
UNWIND [{start: {_id:57}, end: {_id:59}, properties:{}}] AS row
MATCH (start:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.start._id})
MATCH (end:`UNIQUE IMPORT LABEL`{`UNIQUE IMPORT ID`: row.end._id})
CREATE (start)-[r:QUESTIONNAIRE]->(end) SET r += row.properties;
:commit
:begin
MATCH (n:`UNIQUE IMPORT LABEL`)  WITH n LIMIT 20000 REMOVE n:`UNIQUE IMPORT LABEL` REMOVE n.`UNIQUE IMPORT ID`;
:commit
:begin
DROP CONSTRAINT UNIQUE_IMPORT_NAME;
:commit