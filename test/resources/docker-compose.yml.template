services:

  kafka:
    image: apache/kafka:latest
    platform: &platform
      linux/x86_64
    ports:
      - __KAFKA_PORT__:__KAFKA_PORT__
      - __KAFKA_EXTERNAL_PORT__:__KAFKA_EXTERNAL_PORT__
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:__KAFKA_PORT__,EXTERNAL://:__KAFKA_EXTERNAL_PORT__,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:__KAFKA_PORT__,EXTERNAL://localhost:__KAFKA_EXTERNAL_PORT__
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:${KAFKA_PORT}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - internal

  backend:
    build: .
    image: aequitaseu/backend:latest
    platform: *platform
    restart: on-failure
    ports:
      - __AEQUITAS_BACKEND_PORT__:__AEQUITAS_BACKEND_PORT__
    environment:
      AEQUITAS_BACKEND_PORT: __AEQUITAS_BACKEND_PORT__
      ENV: test
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; assert requests.get('http://localhost:__AEQUITAS_BACKEND_PORT__/questions').status_code == 200"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - internal

  db:
    image: neo4j:5
#    platform: *platform
    restart: always
    environment:
      NEO4J_AUTH: neo4j/__DB_PASSWORD__
      DB_USER: __DB_USER__
      DB_PASSWORD: __DB_PASSWORD__
      NEO4JLABS_PLUGINS: '["apoc", "apoc-extended"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: false
      # CALL apoc.cypher.runFile("/neo4j-init.cypher")
      NEO4J_apoc_initializer_neo4j: "__NEO4J_INITIALIZATION_CODE__"
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - data:/data
      - plugins:/plugins
      - ./init.cypher:/neo4j-init.cypher
      - type: bind
        source: ./neo4j-healthcheck.sh
        target: /neo4j-healthcheck.sh
    healthcheck:
      test: bash /neo4j-healthcheck.sh
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 45s
    networks:
      - internal

volumes:
  data:
    driver: local

  plugins:
    driver: local

networks:
  internal:
    driver: bridge
