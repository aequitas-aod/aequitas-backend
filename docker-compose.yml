services:

  kafka:
    image: apache/kafka:latest #bitnami/kafka:3.9
    container_name: ${KAFKA_HOST}
    platform: &platform
      linux/x86_64
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
      - ${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:${KAFKA_PORT},EXTERNAL://:${KAFKA_EXTERNAL_PORT},CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_PORT},EXTERNAL://localhost:${KAFKA_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:${KAFKA_PORT}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
#    depends_on:
#      zookeeper:
#        condition: service_healthy
    restart: on-failure
    networks:
      - internal

#  kafka-ui:
#    container_name: kafka-ui
#    image: provectuslabs/kafka-ui:latest
#    platform: *platform
#    ports:
#      - "${KAFKA_UI_PORT}:8080"
#    environment:
#      DYNAMIC_CONFIG_ENABLED: 'true'
#      KAFKA_CLUSTERS_0_NAME: cluster
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_HOST}:${KAFKA_PORT}
#    depends_on:
#      kafka:
#        condition: service_healthy
#    networks:
#      - internal

  frontend:
    image: aequitaseu/frontend:latest
    container_name: ${AEQUITAS_FRONTEND_HOST}
    ports:
      - "${AEQUITAS_FRONTEND_PORT}:80"
    environment:
      NEXT_PUBLIC_BACKEND_URL: http://localhost:${AEQUITAS_BACKEND_PORT}
    depends_on:
      backend:
        condition: service_healthy

  backend:
    build: .
    image: aequitaseu/backend:latest
    platform: *platform
    container_name: ${AEQUITAS_BACKEND_HOST}
    restart: on-failure
    ports:
      - ${AEQUITAS_BACKEND_PORT}:${AEQUITAS_BACKEND_PORT}
    environment:
      AEQUITAS_BACKEND_PORT: ${AEQUITAS_BACKEND_PORT}
      ENV: production
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; assert requests.get('http://localhost:${AEQUITAS_BACKEND_PORT}/questions').status_code == 200"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - internal
    develop:
      watch:
        - action: sync+restart
          path: .
          target: /home/aequitas-backend

  db:
    image: neo4j:2025
#    platform: *platform
    container_name: ${DB_HOST}
    restart: always
    environment:
      NEO4J_AUTH: neo4j/${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      NEO4J_PLUGINS: '["apoc", "apoc-extended"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: false
      NEO4J_apoc_initializer_neo4j: CALL apoc.cypher.runFile("/neo4j-init.cypher")
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - data:/data
      - plugins:/plugins
      - ./resources/db/init.cypher:/neo4j-init.cypher
      - type: bind
        source: ./neo4j-healthcheck.sh
        target: /neo4j-healthcheck.sh
    healthcheck:
      test: bash /neo4j-healthcheck.sh
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 45s
    networks:
      - internal

volumes:
  data:
    driver: local

  plugins:
    driver: local

networks:
  internal:
    driver: bridge
