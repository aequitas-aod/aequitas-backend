services:

  kafka:
    image: apache/kafka:latest
    container_name: ${KAFKA_HOST}
    platform: &platform
      linux/x86_64
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:${KAFKA_PORT},EXTERNAL://:${KAFKA_EXTERNAL_PORT},CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT},EXTERNAL://${KAFKA_HOST}:${KAFKA_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${KAFKA_HOST}:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:${KAFKA_PORT}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure
    networks:
      - internal

  gateway:
    image: nginx:latest
    container_name: aequitas-gateway
    ports:
      - 80:80
      - 443:443
    restart: always
    environment:
      AEQUITAS_BACKEND_PORT: ${AEQUITAS_BACKEND_PORT}
    command: /bin/sh -c "envsubst '$$AEQUITAS_BACKEND_PORT' < /etc/nginx/conf.d/app.conf.template > /etc/nginx/conf.d/app.conf && exec nginx -g 'daemon off;'"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/app.conf.template:ro
      - ./certificates:/etc/letsencrypt/:ro
    networks:
      - internal
    healthcheck: &curl-localhost
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      certbot:
        condition: service_completed_successfully
      frontend:
        condition: service_healthy

  certbot:
    image: certbot/certbot:latest
    container_name: aequitas-certificates-generator
    ports:
      - 80:80
      - 443:443
    entrypoint: |
      certbot certonly --standalone --non-interactive --agree-tos --email ${EMAIL} --domains ${DOMAIN}
    volumes:
      - ./certificates:/etc/letsencrypt/:rw

  frontend:
    image: aequitaseu/frontend:latest
    container_name: ${AEQUITAS_FRONTEND_HOST}
    environment:
      NEXT_PUBLIC_BACKEND_URL: https://aequitas.apice.unibo.it/api
    depends_on:
      backend:
        condition: service_healthy
    healthcheck: &curl-localhost
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 1m
    networks:
      - internal

  backend:
    image: aequitaseu/backend:latest
    platform: *platform
    container_name: ${AEQUITAS_BACKEND_HOST}
    restart: on-failure
    environment:
      AEQUITAS_BACKEND_PORT: ${AEQUITAS_BACKEND_PORT}
      ENV: production
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; assert requests.get('http://localhost:${AEQUITAS_BACKEND_PORT}/questions').status_code == 200"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - internal
    develop:
      watch:
        - action: sync+restart
          path: .
          target: /home/aequitas-backend

  db:
    image: neo4j:5
    container_name: ${DB_HOST}
    restart: always
    environment:
      NEO4J_AUTH: neo4j/${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      NEO4J_PLUGINS: '["apoc", "apoc-extended"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: false
      NEO4J_apoc_initializer_neo4j: CALL apoc.cypher.runFile("/neo4j-init.cypher")
    volumes:
      - data:/data
      - plugins:/plugins
      - ./resources/db/init.cypher:/neo4j-init.cypher
      - type: bind
        source: ./neo4j-healthcheck.sh
        target: /neo4j-healthcheck.sh
    healthcheck:
      test: bash /neo4j-healthcheck.sh
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 45s
    networks:
      - internal

volumes:
  data:
    driver: local

  plugins:
    driver: local

networks:
  internal:
    driver: bridge
