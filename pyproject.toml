[tool.poetry]
name = "Aequitas Backend"
version = "v0.37.2"
description = "Backend service of for Aequitas project"
authors = ["aequitas-aod"]
packages = [
    { include = "domain" },
    { include = "application" },
    { include = "presentation" },
    { include = "infrastructure" },
    { include = "utils" },
]

[tool.poetry.dependencies]
python = ">= 3.10.0, < 4.0.0"
flask = "3.1.1"
flask-restful = "0.3.10"
requests = "2.32.4"
waitress = "3.0.2"
python-dotenv = "1.0.1"
pydantic = "2.11.7"
neo4j = "5.28.1"
flask-cors = "6.0.1"
pyyaml = "6.0.2"
backoff = "2.2.1"
shortuuid = "1.0.13"
coverage = "^7.6.1"
pandas = "^2.2.3"
kafka-python-ng = "^2.2.3"
matplotlib = "^3.10.0"
scikit-learn = "^1.6.0"
seaborn = "^0.13.2"
aif360 = "^0.6.1"
fairlearn = "^0.12.0"
aequitas-fairlib = "^2.8.0"

[tool.poetry.group.dev.dependencies]
black = "25.1.0"
python-on-whales = "0.77.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
compile-all = { cmd = "python -m compileall application domain infrastructure presentation resources test utils" }
dev = { cmd = "flask --app infrastructure/ws/main.py run -h 0.0.0.0 -p $port", args = ["port"], env = { ENV = "develop", DB_HOST = "localhost" } }
flask = { cmd = "flask --app infrastructure/ws/main.py run -h 0.0.0.0 -p $port", args = ["port"], env = { DB_HOST = "aequitas-db" } }
serve = { cmd = "waitress-serve --threads=20 --port $port --call infrastructure.ws.main:create_app", args = ["port"], env = { ENV = "production", DB_HOST = "aequitas-db" } }
###
regenerate-general-context = { cmd = "python -m resources.db.cypher regenerate general_context", env = { ENV = "develop", DB_HOST = "localhost" } }
regenerate-init = { cmd = "python -m resources.db regenerate init", env = { ENV = "develop", DB_HOST = "localhost" } }
###
test = { cmd = "python -m unittest discover -v -t . -s test -p 'test_*.py'", env = { ENV = "test", DB_HOST = "localhost" } }
unit-test = { cmd = "python -m unittest discover -v -t . -s test/unit -p 'test_*.py'", env = { ENV = "test" } }
integration-test = { cmd = "python -m unittest discover -v -t . -s test/integration -p 'test_*.py'", env = { ENV = "test", DB_HOST = "localhost" } }
coverage = { cmd = "coverage run -m unittest discover -v -t . -s test -p 'test_*.py'", env = { ENV = "test", DB_HOST = "localhost" } }
coverage-report = "coverage report --omit='test/*'"
###
format-check = "black --check ."
format = "black ."
