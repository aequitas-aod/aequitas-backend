@startuml

entity ProjectQuestionId {
  +questionId: QuestionId
  +projectId: ProjectId
}

entity Answer {
  +id: AnswerId
  +text: string
  +description: string
}

entity AnswerId {
  +code: string
  +questionId: QuestionId
}
entity ProjectAnswerId {
  +questionId: ProjectQuestionId
}

AnswerId <|-- ProjectAnswerId

entity QuestionId {
  +code: string
}

entity Question {
  +id: QuestionId
  +text: string
  +type: QuestionType
  +answers: Set<Answer>
  +createdAt: Datetime
}

entity GraphQuestion {
  +enabledBy: Set<GraphAnswerId>
  +actionNeeded: Optional<Action>
}

ProjectQuestionId --|> QuestionId
ProjectQuestionId *- ProjectId

entity ProjectQuestion {
  +id: ProjectQuestionId
  +answers: Set<ProjectAnswer>
  +selectionStrategy: SelectionStrategy
  +previousQuestionId: Optional<ProjectQuestionId>
  +selectAnswer(answerId: ProjectAnswerId): ProjectQuestion
  +deselectAnswer(answerId: ProjectAnswerId): ProjectQuestion
  +deselectAllAnswers(): ProjectQuestion
}


entity AnswerFactory {
  +createAnswer(answerId, text, value): Answer
  +createBooleanAnswer(answerId, value): Answer
}

entity QuestionFactory {
  +createQuestion(questionId, text, questionType, availableAnswers,
  previousQuestionId, enabledBy, actionNeeded): Question
  +createBooleanQuestion(questionId, text, previousQuestionId,
  enabledBy, actionNeeded): Question
}

entity QuestionRepository {
  +getAllQuestions(): List<Question>
  +getQuestionById(questionId): Optional<Question>
  +insertQuestion(question): void
  +updateQuestion(questionId, question): void
  +deleteQuestion(questionId): void
}

entity QuestionService {
  +getAllQuestions(): List<Question>
  +getQuestionById(questionId): Optional<Question>
  +addQuestion(question): void
  +updateQuestion(questionId, question): void
  +deleteQuestion(questionId): void
}

enum Action {
  METRICS_CHECK
}

enum QuestionType {
  BOOLEAN
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING
}

Answer *- AnswerId
AnswerFactory --> Answer : creates
QuestionFactory --> Question : creates
QuestionRepository --> Question : uses
QuestionService o-- QuestionRepository

Question *- QuestionId
Question <|-- GraphQuestion
Question <|-- ProjectQuestion
Question o-- Answer
'Question *-- QuestionType
'GraphQuestion *-- "0..1" Action



@enduml